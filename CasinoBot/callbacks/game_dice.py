import asyncio

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from data.db import find_user, check_bonus, set_bet, change_money, check_bet
from keyboards.inline import generator_buttons
from utils.states import SetBet_Bones

router = Router()



@router.callback_query(F.data == 'bones')
async def bones_menu(query: CallbackQuery, state: FSMContext):
    await check_bonus(query=query)
    await state.set_state(SetBet_Bones.bet)
    user = find_user(query)
    if check_bet(message=query, bones=True):
        await query.message.edit_text(
            f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {user.bet_bones} üí∏\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–∞–≤–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å"',
            reply_markup=generator_buttons(['–ù–∞—á–∞—Ç—å', '–ù–∞–∑–∞–¥'], ['bones_start', 'main_menu'], 2))
    else:
        await set_bet(query, bet='0', bones=True)
        await query.message.edit_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é')
        await query.message.answer(
            f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–∞–≤–∫—É'
        )

@router.message(SetBet_Bones.bet)
async def set_bet_bones(message: Message):
    await check_bonus(message=message)
    bet = message.text
    await set_bet(message, bet, bones=True)
    user = find_user(message)
    await message.answer(f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {user.bet_bones} üí∏\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–∞–≤–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å"', reply_markup=generator_buttons(['–ù–∞—á–∞—Ç—å', '–ù–∞–∑–∞–¥'], ['bones_start', 'main_menu'], 2))


@router.callback_query(F.data == 'bones_start')
async def bones_start_bet(query:CallbackQuery, state:FSMContext):
    await state.clear()
    if check_bet(message=query, bones=True):
        await check_bonus(query=query)
        await query.message.answer('–í–∞—à —Ö–æ–¥:')
        result_user = await query.message.answer_dice(emoji='üé≤')
        await asyncio.sleep(4)
        await query.message.answer('–ú–æ–π —Ö–æ–¥:')
        result_bot = await query.message.answer_dice(emoji='üé≤')
        await asyncio.sleep(4)
        if result_bot.dice.value > result_user.dice.value:
            result = change_money(query, bones=True, win=False)
            await query.message.answer(f'–Ø –≤—ã–π–≥—Ä–∞–ª! \n'
                                       f'{result}', reply_markup=generator_buttons(["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ù–∞–∑–∞–¥"],["bones_start", "bones"], 2))
        elif result_bot.dice.value < result_user.dice.value:
            result = change_money(query, bones=True, win=True)
            await query.message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n'
                                       f'{result}', reply_markup=generator_buttons(["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ù–∞–∑–∞–¥"],["bones_start", "bones"], 2))
        else:
            user = find_user(query)
            await query.message.answer(f'–ù–∏—á—å—è!'
                                       f'–£ –≤–∞—Å {user.money} üí∞', reply_markup=generator_buttons(["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "–ù–∞–∑–∞–¥"],["bones_start", "bones"], 2))
    else:
        await query.message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É!', reply_markup=generator_buttons(["–ù–∞–∑–∞–¥"],["bones"], 1))



